- name: Update minecraft whitelist
  hosts: all
  become: true
  vars:
    minecraft_usernames:
      - "SheriffJackson"
    lock_timeout: 60
  tasks:
    - block:
      - name: Create UUID tool
        ansible.builtin.copy:
          content: |
            import java.nio.charset.StandardCharsets;
            import java.util.UUID;

            public class MinecraftOfflineUUID {

              public static UUID getOfflineUUID(String playerName) {
                // Create the string with the "OfflinePlayer:" prefix
                String offlinePlayerName = "OfflinePlayer:" + playerName;

                // Convert the string to bytes using UTF-8 encoding
                byte[] playerNameBytes = offlinePlayerName.getBytes(StandardCharsets.UTF_8);

                // Generate the UUID based on the bytes
                return UUID.nameUUIDFromBytes(playerNameBytes);
              }

              public static void main(String[] args) {
                // Example usage
                String playerName = args[0];
                UUID offlineUUID = getOfflineUUID(playerName);

                // Print the generated UUID
                System.out.print(offlineUUID);
              }
            }
          dest: /etc/minecraft/MinecraftOfflineUUID.java
          mode: '0644'

      - name: Generate UUIDs for whitelist
        loop: "{{ minecraft_usernames }}"
        register: java_responses
        command: java -jar /etc/minecraft/MinecraftOfflineUUID.java "{{ item }}"

      - name: Create entires
        set_fact:
          whitelist_entries: "{{ whitelist_entries | default([]) + [{'uuid': item.stdout,'name': item.item}] }}"
        loop: "{{ java_responses.results }}"
      
      - name: Show whitelist entries
        debug:
          msg: "{{ whitelist_entries }}"

      - name: Check if lock file exists and is not stale
        ansible.builtin.stat:
          path: /etc/minecraft/whitelist.lock
        register: lockfile

      - name: Remove stale lock file
        ansible.builtin.file:
          path: /etc/minecraft/whitelist.lock
          state: absent
        when:
          - lockfile.stat.exists
          - (ansible_date_time.epoch | int) - (lockfile.stat.mtime | int) > lock_timeout

      - name: Check lock file again after potential stale removal
        ansible.builtin.stat:
          path: /etc/minecraft/whitelist.lock
        register: lockfile_final

      - name: Fail if lock file still exists
        ansible.builtin.fail:
          msg: "Another process is updating the file. Please try again later."
        when: lockfile_final.stat.exists

      - name: Create lock file
        ansible.builtin.file:
          path: /etc/minecraft/whitelist.lock
          state: touch

      - name: Ensure whitelist.json exists
        ansible.builtin.file:
          path: /etc/minecraft/whitelist.json
          state: touch

      - name: Read existing whitelist.json
        ansible.builtin.slurp:
          src: /etc/minecraft/whitelist.json
        register: whitelist_file
        ignore_errors: true

      - name: Parse existing whitelist.json
        ansible.builtin.set_fact:
          existing_whitelist: "{{ (whitelist_file['content'] | b64decode | from_json) if (whitelist_file['content'] is defined and whitelist_file['content'] | length > 0) else [] }}"

      - name: Merge whitelist entries
        ansible.builtin.set_fact:
          updated_whitelist: "{{ (existing_whitelist | default([])) + whitelist_entries | unique(attribute='uuid') }}"

      - name: Write updated whitelist.json
        ansible.builtin.copy:
          content: "{{ updated_whitelist | to_nice_json }}"
          dest: /etc/minecraft/whitelist.json
          mode: '0644'
        register: write_result
      
      - name: Reload the whitelist
        command: rcon-cli --password password whitelist reload 
      always:
        - name: Remove lock file
          ansible.builtin.file:
            path: /etc/minecraft/whitelist.lock
            state: absent

