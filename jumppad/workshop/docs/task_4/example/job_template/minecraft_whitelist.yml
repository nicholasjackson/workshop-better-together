- name: Update whitelist.json with locking and retries
  hosts: all
  vars:
    minecraft_usernames:
      - "SheriffJackson"
    lock_timeout: 30  # 5 minutes in seconds
  
  tasks:
    - name: Fetch UUIDs from Mojang API (with retries)
      uri:
        url: "https://api.mojang.com/users/profiles/minecraft/{{ item }}"
        method: GET
        return_content: yes
        status_code: [200, 204]
      loop: "{{ minecraft_usernames }}"
      register: mojang_responses
      until: ansible_result.status == 200
      retries: 3
      delay: 1

    - name: Extract UUIDs
      set_fact:
        whitelist_entries: "{{ whitelist_entries | default([]) + [{'uuid': item.json.id, 'name': item.json.name}] }}"
      loop: "{{ mojang_responses.results }}"
      when: 
        - item.status == 200
        - item.json is defined 
        - item.json.id is defined

    - name: Check if lock file exists and is not stale
      ansible.builtin.stat:
        path: /etc/minecraft/whitelist.lock
      register: lockfile

    - name: Remove stale lock file
      ansible.builtin.file:
        path: /etc/minecraft/whitelist.lock
        state: absent
      when: 
        - lockfile.stat.exists
        - (ansible_date_time.epoch | int) - (lockfile.stat.mtime | int) > lock_timeout

    - name: Check lock file again after potential stale removal
      ansible.builtin.stat:
        path: /etc/minecraft/whitelist.lock
      register: lockfile_final

    - name: Fail if lock file still exists
      ansible.builtin.fail:
        msg: "Another process is updating the file. Please try again later."
      when: lockfile_final.stat.exists

    - name: Create lock file
      ansible.builtin.file:
        path: /etc/minecraft/whitelist.lock
        state: touch

    - name: Ensure whitelist.json exists
      ansible.builtin.file:
        path: /etc/minecraft/whitelist.json
        state: touch

    - name: Read existing whitelist.json
      slurp:
        src: /etc/minecraft/whitelist.json
      register: whitelist_file
      ignore_errors: yes

    - name: Parse existing whitelist.json
      set_fact:
        existing_whitelist: "{{ (whitelist_file['content'] | b64decode | from_json) if (whitelist_file['content'] is defined and whitelist_file['content'] | length > 0) else [] }}"

    - name: Merge whitelist entries
      set_fact:
        updated_whitelist: "{{ (existing_whitelist | default([])) + whitelist_entries | unique(attribute='uuid') }}"

    - name: Write updated whitelist.json
      copy:
        content: "{{ updated_whitelist | to_nice_json }}"
        dest: /etc/minecraft/whitelist.json
        mode: '0644'
      register: write_result

    - name: Remove lock file
      ansible.builtin.file:
        path: /etc/minecraft/whitelist.lock
        state: absent
      always_yes: true